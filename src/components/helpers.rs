use chrono::NaiveDate;
use yew::html;

use super::{
    article_component::ArticleBlock,
    breaking_block_component::BreakingBlock,
    social_media_block_component::{SocialMediaBlock, SocialMediaEnum},
};

pub fn codeur_facile_description_block() -> BreakingBlock {
    let block_description = "Bienvenue sur le site de Codeur facile. Tout comme pour trouver ces quelques lignes de textes, le but de ce site est de proposer des exp√©riences ludiques. La curiosit√© est de mise pour touver tout ce que ce site a √† proposer. Il s'agit d'un site d√©velopp√© en Rust ü¶Ä avec le framework Yew, avec beaucoup d'‚ù§Ô∏è. D√©couvrez √©galement ci-dessous les articles de blog pour la chaine Codeur Facile.".to_string();
    BreakingBlock{
        id: 0,
        text: "Trouvez ce que je cache!".to_string(),
        text_destroyed: block_description,
        texture_url: "https://cdn.discordapp.com/attachments/1074719812871258122/1074719876909908058/breaking_cube.png".to_string(),
        broken_texture_url: "https://media.discordapp.net/attachments/1074719812871258122/1074722110892679178/breaking_cube.gif".to_string()
    }
}

pub fn introduction_rust_article(expanded: bool) -> ArticleBlock {
    ArticleBlock {
        title: "Introduction √† Rust".to_string(),
        text: html! {
            <>
                <h3>{"Qu'est-ce que Rust??"}</h3>
                <p>{"Rust est un langage de programmation informatique universel multi-paradigme. Il est typ√© statiquement et fournit un environnement de programmation rapide, fiable, productif et √©conome en m√©moire ainsi qu‚Äôen √©nergie (non n√©gligeable de nos jours)."}</p>
                <p>{"Il est id√©al pour les services critiques en termes de performances, peut s‚Äôex√©cuter sur des appareils embarqu√©s et s‚Äôint√®gre tr√®s facilement √† d‚Äôautres langages de programmation. Il reste un excellent choix dans d'autres situations nottament gr√¢ce √† une communaut√© tr√®s riche et active."}</p>
                <h3>{"Pourquoi Rust?"}</h3>
                <ul>
                    <li>{"Open-Source: Rust est un projet open source avec une multitude de ressources d‚Äôapprentissage et, comme mentionn√© ci-dessus, a √©t√© d√©velopp√© chez Mozilla Research. La Rust Foundation a √©t√© cr√©√©e pour soutenir le maintien et le d√©veloppement de ce langage."}</li>
                    <li>{"Comme C/C++ mais en mieux: les d√©veloppeurs de logiciels utilisant les langages de programmation C et C++ sont confront√©s depuis tr√®s longtemps √† diverses erreurs de m√©moire et √† des probl√®mes de programmation r√©currents. L‚Äôune des principales forces de Rust est qu‚Äôil r√©sout efficacement ces probl√®mes."}</li>
                    <li>{"Borrow checker: une autre caract√©ristique importante est le v√©rificateur d‚Äôemprunt de Rust, une partie du compilateur qui garantit que les r√©f√©rences de donn√©es ne d√©passent pas les donn√©es auxquelles elles se r√©f√®rent. En √©liminant les bugs de violation de m√©moire en les d√©tectant au moment de la compilation, le garbage collector peut √™tre oubli√© (et c'est une tr√®s bonne chose!)."}</li>
                    <li>{"R√©f√©rence √† vie: dans Rust, toutes les r√©f√©rences de donn√©es ont des dur√©es de vie. Cela signifie que les d√©veloppeurs de logiciels peuvent d√©finir dans quelle mesure cette r√©f√©rence de donn√©es est valide, corriger les bugs courants li√©s aux r√©f√©rences invalides et distinguer le langage Rust des probl√®mes C et C++."}</li>
                    <li>{"Rust s√ªr üÜö Rust non s√ªr: il existe deux modes d‚Äô√©criture de code en Rust : Safe Rust et Unsafe Rust. Le premier mode assure l‚Äôefficacit√© du code en imposant diverses restrictions au programmeur. Le second mode offre une autonomie de programmation sans üîì mesures de s√©curit√© du code."}</li>
                    <li>{"Programmation concurrente: Rust permet de programmer facilement des logiciels concurrents car il emp√™che les courses de donn√©es pendant la compilation. Les courses de donn√©es peuvent causer des probl√®mes lorsque au moins deux processus diff√©rents acc√®dent au m√™me emplacement de m√©moire de l‚Äôordinateur simultan√©ment."}</li>
                </ul>
                <h3>{"Comment commencer?"}</h3>
                <p>{"Dans cet article, nous allons voir comment commencer √† d√©velopper en Rust sans installation d'aucun outil. Vous allez voir comment d√©velopper en Rust (ou m√™me n'importe quel autre langage) en utilisant un EDI(Environnement de d√©veloppement int√©gr√©) directement dans le Cloud. Personnellement, je pr√©f√®re quand m√™me installer tous mes outils en local et vous recommande de suivre la page de documentation suivante pour installer tous les outils n√©cessaires: "}<a href="https://www.rust-lang.org/learn/get-started">{"Getting started"}</a></p>
                <h4>{"Gitpod"}</h4>
                <p>{"Si vous souhaitez d√©velopper dans le cloud directement, nous allons nous int√©resser √† "}<a href="https://www.gitpod.io/">{"Gitpod."}</a></p>
                <p>{"Vous pouvez vous logger en utilisant votre compte Gitlab, Github ou Bitbucket:"}</p>
                <img src="https://cdn.discordapp.com/attachments/1075772415088533604/1075772522034896957/image.png" />
                <p>{"Une fois enregistr√©, il est possible de cr√©er n‚Äôimporte quel workspace pour se mettre √† travailler directement. Pas besoin d‚Äôinstaller quoi que ce soit en plus:"}</p>
                <img src="https://cdn.discordapp.com/attachments/1075772415088533604/1075772677408702534/image.png" />
                <p>{"Il suffit de copier/coller l‚ÄôURL de n‚Äôimporte quel projet Git pr√©sent dans votre outil de sources pr√©f√©r√©:"}</p>
                <img src="https://cdn.discordapp.com/attachments/1075772415088533604/1075773026748092456/image.png" />
                <p>{"Une fois l‚Äôenvironnement initialis√©, il est possible de travailler directement dans l‚ÄôIDE choisi comme dans l‚Äôexemple ci-dessous:"}</p>
                <img src="https://cdn.discordapp.com/attachments/1075772415088533604/1075773234735239208/image.png" />
                <p>{"Vous √™tes pr√™ts √† travailler! Vous pouvez v√©rifier que tout fonctionne en utilisant les commandes suivantes dans le terminal:"}</p>
                <ul>
                    <li>{"cargo init test-project"}</li>
                    <li>{"cd test-project"}</li>
                    <li>{"cargo run"}</li>
                </ul>
                <p>{"Tout fonctionne bien si le texte `Hello World!` apparait dans le terminal. Nous verrons dans les prochains articles les bases du d√©veloppement en Rust."}</p>
            </>
        },
        date: NaiveDate::from_ymd_opt(2023, 2, 16).unwrap(),
        expanded_default: expanded,
    }
}

pub fn youtube_link() -> SocialMediaBlock {
    SocialMediaBlock {
        social_media_class: SocialMediaEnum::Youtube,
        social_media_url: "https://www.youtube.com/@codeurfacile".to_string(),
    }
}

pub fn github_link() -> SocialMediaBlock {
    SocialMediaBlock {
        social_media_class: SocialMediaEnum::Github,
        social_media_url: "https://github.com/codeurfacile".to_string(),
    }
}

pub fn twitter_link() -> SocialMediaBlock {
    SocialMediaBlock {
        social_media_class: SocialMediaEnum::Twitter,
        social_media_url: "https://twitter.com/CodeurFacile".to_string(),
    }
}

pub fn facebook_link() -> SocialMediaBlock {
    SocialMediaBlock {
        social_media_class: SocialMediaEnum::Facebook,
        social_media_url: "https://www.facebook.com/profile.php?id=100089960516590".to_string(),
    }
}
